import os
import asyncio
import httpx
from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ß–∞—Å—Ç—å 1: –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot ---
app = Flask('')
@app.route('/')
def home(): return "Admin Bot is alive"
def run_flask(): app.run(host='0.0.0.0', port=8080)
def keep_alive(): Thread(target=run_flask).start()

# --- –ß–∞—Å—Ç—å 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ ---
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.environ.get('TELEGRAM_ADMIN_ID'))
GITHUB_USERNAME = os.environ.get('GITHUB_USERNAME')
GITHUB_REPO = os.environ.get('GITHUB_REPO')
GITHUB_PAT = os.environ.get('GITHUB_PAT')
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# --- –ß–∞—Å—Ç—å 3: –ê–°–ò–ù–•–†–û–ù–ù–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ ---
def get_main_keyboard():
    keyboard = [[InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–π—á–∞—Å", callback_data='run_now')],
                [InlineKeyboardButton("üïí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='schedule_menu')],
                [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data='status')]]
    return InlineKeyboardMarkup(keyboard)

async def trigger_github_action(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    print("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ GitHub Actions...")
    url = f"https://api.github.com/repos/{GITHUB_USERNAME}/{GITHUB_REPO}/dispatches"
    headers = {"Accept": "application/vnd.github.v3+json", "Authorization": f"token {GITHUB_PAT}"}
    data = {"event_type": "start-processing"}
    
    async with httpx.AsyncClient() as client:
        response = await client.post(url, headers=headers, json=data)
    
    message = f"üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ '—Ñ–∞–±—Ä–∏–∫–∏' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ GitHub: {response.status_code}"
    if response.status_code != 204: message += f"\n–û—Ç–≤–µ—Ç: {response.text}"
    
    await context.bot.send_message(chat_id=chat_id, text=message)

async def scheduled_trigger(context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    await trigger_github_action(context, chat_id=ADMIN_ID)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å '–í–∏–¥–µ–æ –ê—Ä—Ö–∏–≤'", reply_markup=get_main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'run_now':
        await query.edit_message_text(text="‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∑–∞–ø—É—Å–∫...")
        await trigger_github_action(context, chat_id=update.effective_chat.id)
        await asyncio.sleep(2)
        await query.edit_message_text(text="‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –õ–æ–≥–∏ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –õ–°.\n\n–í–æ–∑–≤—Ä–∞—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=get_main_keyboard())
    
    elif query.data == 'schedule_menu':
        keyboard = [[InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å 11:00 –ú–°–ö", callback_data='set_schedule_11')],
                    [InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å 15:00 –ú–°–ö", callback_data='set_schedule_15')],
                    [InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å –æ–±–∞ (11 –∏ 15)", callback_data='set_schedule_both')],
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data='set_schedule_off')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]]
        await query.edit_message_text(text="üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–ø–æ –ú–æ—Å–∫–≤–µ):", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith('set_schedule'):
        for job in scheduler.get_jobs(): job.remove()
        text = "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ."
        if query.data == 'set_schedule_11':
            scheduler.add_job(scheduled_trigger, 'cron', hour=11, minute=0, args=[context], id='job_11')
            text = "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 11:00 –ú–°–ö."
        elif query.data == 'set_schedule_15':
            scheduler.add_job(scheduled_trigger, 'cron', hour=15, minute=0, args=[context], id='job_15')
            text = "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 15:00 –ú–°–ö."
        elif query.data == 'set_schedule_both':
            scheduler.add_job(scheduled_trigger, 'cron', hour=11, minute=0, args=[context], id='job_11')
            scheduler.add_job(scheduled_trigger, 'cron', hour=15, minute=0, args=[context], id='job_15')
            text = "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 11:00 –∏ 15:00 –ú–°–ö."
        await query.edit_message_text(text, reply_markup=get_main_keyboard())

    elif query.data == 'status':
        jobs = scheduler.get_jobs()
        status_text = "üìä –ê–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n" + "\n".join([f"- –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤ {job.next_run_time.strftime('%H:%M:%S')} –ø–æ –ú–°–ö" for job in jobs]) if jobs else "üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ."
        await query.answer(status_text, show_alert=True)
        
    elif query.data == 'main_menu':
         await query.edit_message_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å '–í–∏–¥–µ–æ –ê—Ä—Ö–∏–≤'", reply_markup=get_main_keyboard())

# --- –ß–∞—Å—Ç—å 4: –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ---
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    keep_alive()
    print("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot –∑–∞–ø—É—â–µ–Ω...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler(["start", "admin"], start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –í–ù–£–¢–†–ò –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞ ---
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ "event loop"
    if not scheduler.running:
        scheduler.start()
        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç-–∞–¥–º–∏–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    application.run_polling()

if __name__ == '__main__':
    try:
        import httpx
    except ImportError:
        import subprocess
        subprocess.run(['pip', 'install', 'httpx'])
    main()
