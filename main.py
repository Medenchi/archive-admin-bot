import os
import asyncio
from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ß–∞—Å—Ç—å 1: –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot, —á—Ç–æ–±—ã Replit –Ω–µ –∑–∞—Å—ã–ø–∞–ª ---
app = Flask('')

@app.route('/')
def home():
    return "Admin Bot is alive"

def run_flask():
  app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

# --- –ß–∞—Å—Ç—å 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º "—Å–µ–∫—Ä–µ—Ç—ã" –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Replit
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.environ.get('TELEGRAM_ADMIN_ID'))
GITHUB_USERNAME = os.environ.get('GITHUB_USERNAME')
GITHUB_REPO = os.environ.get('GITHUB_REPO')
GITHUB_PAT = os.environ.get('GITHUB_PAT')
    
# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# --- –ß–∞—Å—Ç—å 3: –§—É–Ω–∫—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ ---

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–π—á–∞—Å", callback_data='run_now')],
        [InlineKeyboardButton("üïí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='schedule_menu')],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data='status')],
    ]
    return InlineKeyboardMarkup(keyboard)
        
async def trigger_github_action(context: ContextTypes.DEFAULT_TYPE = None, chat_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç API-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ GitHub Actions."""
    print("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ GitHub Actions...")
    url = f"https://api.github.com/repos/{GITHUB_USERNAME}/{GITHUB_REPO}/dispatches"
    headers = { 
        "Accept": "application/vnd.github.v3+json", 
        "Authorization": f"token {GITHUB_PAT}" 
    }
    data = {"event_type": "start-processing"}
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É, —á—Ç–æ–±—ã –Ω–µ "–≤–µ—à–∞—Ç—å" –±–æ—Ç–∞
    import httpx
    async with httpx.AsyncClient() as client:
        response = await client.post(url, headers=headers, json=data)
    
    message = f"üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ '—Ñ–∞–±—Ä–∏–∫–∏' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ GitHub: {response.status_code}"
    if response.status_code != 204: 
        message += f"\n–û—Ç–≤–µ—Ç: {response.text}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
    target_chat_id = chat_id
    if context and context.job and context.job.data:
        target_chat_id = context.job.data.get('chat_id')
    
    if target_chat_id: 
        await context.bot.send_message(chat_id=target_chat_id, text=message)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start –∏ /admin."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å '–í–∏–¥–µ–æ –ê—Ä—Ö–∏–≤'", reply_markup=get_main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤—Å–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id

    if query.data == 'run_now':
        await query.edit_message_text(text="‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∑–∞–ø—É—Å–∫...")
        await trigger_github_action(context=context, chat_id=chat_id)
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
        await asyncio.sleep(2)
        await query.edit_message_text(text="‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –õ–æ–≥–∏ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –õ–°.\n\n"
                                             "–í–æ–∑–≤—Ä–∞—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=get_main_keyboard())
    
    elif query.data == 'schedule_menu':
        keyboard = [
            [InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å 11:00 –ú–°–ö", callback_data='set_schedule_11')],
            [InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å 15:00 –ú–°–ö", callback_data='set_schedule_15')],
            [InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å –æ–±–∞ (11 –∏ 15)", callback_data='set_schedule_both')],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='set_schedule_off')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        await query.edit_message_text(text="üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–ø–æ –ú–æ—Å–∫–≤–µ):", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith('set_schedule'):
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
        for job in scheduler.get_jobs():
            job.remove()
        
        text = "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ."
        if query.data == 'set_schedule_11':
            scheduler.add_job(trigger_github_action, 'cron', hour=11, minute=0, kwargs={'context': context, 'chat_id': chat_id}, id='job_11')
            text = "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 11:00 –ú–°–ö."
        elif query.data == 'set_schedule_15':
            scheduler.add_job(trigger_github_action, 'cron', hour=15, minute=0, kwargs={'context': context, 'chat_id': chat_id}, id='job_15')
            text = "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 15:00 –ú–°–ö."
        elif query.data == 'set_schedule_both':
            scheduler.add_job(trigger_github_action, 'cron', hour=11, minute=0, kwargs={'context': context, 'chat_id': chat_id}, id='job_11')
            scheduler.add_job(trigger_github_action, 'cron', hour=15, minute=0, kwargs={'context': context, 'chat_id': chat_id}, id='job_15')
            text = "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 11:00 –∏ 15:00 –ú–°–ö."
        
        await query.edit_message_text(text, reply_markup=get_main_keyboard())

    elif query.data == 'status':
        jobs = scheduler.get_jobs()
        if not jobs:
            status_text = "üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ."
        else:
            status_text = "üìä –ê–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            for job in jobs:
                status_text += f"- –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤ {job.next_run_time.strftime('%H:%M:%S')} –ø–æ –ú–°–ö\n"
        await query.answer(status_text, show_alert=True)
        
    elif query.data == 'main_menu':
         await query.edit_message_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å '–í–∏–¥–µ–æ –ê—Ä—Ö–∏–≤'", reply_markup=get_main_keyboard())

# --- –ß–∞—Å—Ç—å 4: –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ---

async def main_async():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler(["start", "admin"], start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram)
    print("–ë–æ—Ç-–∞–¥–º–∏–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω...")
    await application.run_polling()

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º httpx, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        import httpx
    except ImportError:
        import subprocess
        subprocess.run(['pip', 'install', 'httpx'])
        
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã Replit –Ω–µ –∑–∞—Å—ã–ø–∞–ª
    keep_alive()
    print("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot –∑–∞–ø—É—â–µ–Ω...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –±–æ—Ç–∞
    asyncio.run(main_async())
